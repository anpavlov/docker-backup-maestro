// Code generated by mockery v2.50.2. DO NOT EDIT.

package mocks

import (
	context "context"

	container "github.com/docker/docker/api/types/container"

	events "github.com/docker/docker/api/types/events"

	image "github.com/docker/docker/api/types/image"

	io "io"

	mock "github.com/stretchr/testify/mock"

	network "github.com/docker/docker/api/types/network"

	types "github.com/docker/docker/api/types"

	v1 "github.com/opencontainers/image-spec/specs-go/v1"
)

// DockerApi is an autogenerated mock type for the dockerApi type
type DockerApi struct {
	mock.Mock
}

type DockerApi_Expecter struct {
	mock *mock.Mock
}

func (_m *DockerApi) EXPECT() *DockerApi_Expecter {
	return &DockerApi_Expecter{mock: &_m.Mock}
}

// ContainerCreate provides a mock function with given fields: ctx, config, hostConfig, networkingConfig, platform, containerName
func (_m *DockerApi) ContainerCreate(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, platform *v1.Platform, containerName string) (container.CreateResponse, error) {
	ret := _m.Called(ctx, config, hostConfig, networkingConfig, platform, containerName)

	if len(ret) == 0 {
		panic("no return value specified for ContainerCreate")
	}

	var r0 container.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) (container.CreateResponse, error)); ok {
		return rf(ctx, config, hostConfig, networkingConfig, platform, containerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) container.CreateResponse); ok {
		r0 = rf(ctx, config, hostConfig, networkingConfig, platform, containerName)
	} else {
		r0 = ret.Get(0).(container.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) error); ok {
		r1 = rf(ctx, config, hostConfig, networkingConfig, platform, containerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DockerApi_ContainerCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerCreate'
type DockerApi_ContainerCreate_Call struct {
	*mock.Call
}

// ContainerCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - config *container.Config
//   - hostConfig *container.HostConfig
//   - networkingConfig *network.NetworkingConfig
//   - platform *v1.Platform
//   - containerName string
func (_e *DockerApi_Expecter) ContainerCreate(ctx interface{}, config interface{}, hostConfig interface{}, networkingConfig interface{}, platform interface{}, containerName interface{}) *DockerApi_ContainerCreate_Call {
	return &DockerApi_ContainerCreate_Call{Call: _e.mock.On("ContainerCreate", ctx, config, hostConfig, networkingConfig, platform, containerName)}
}

func (_c *DockerApi_ContainerCreate_Call) Run(run func(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, platform *v1.Platform, containerName string)) *DockerApi_ContainerCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.Config), args[2].(*container.HostConfig), args[3].(*network.NetworkingConfig), args[4].(*v1.Platform), args[5].(string))
	})
	return _c
}

func (_c *DockerApi_ContainerCreate_Call) Return(_a0 container.CreateResponse, _a1 error) *DockerApi_ContainerCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DockerApi_ContainerCreate_Call) RunAndReturn(run func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) (container.CreateResponse, error)) *DockerApi_ContainerCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerList provides a mock function with given fields: ctx, options
func (_m *DockerApi) ContainerList(ctx context.Context, options container.ListOptions) ([]types.Container, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerList")
	}

	var r0 []types.Container
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, container.ListOptions) ([]types.Container, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, container.ListOptions) []types.Container); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Container)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, container.ListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DockerApi_ContainerList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerList'
type DockerApi_ContainerList_Call struct {
	*mock.Call
}

// ContainerList is a helper method to define mock.On call
//   - ctx context.Context
//   - options container.ListOptions
func (_e *DockerApi_Expecter) ContainerList(ctx interface{}, options interface{}) *DockerApi_ContainerList_Call {
	return &DockerApi_ContainerList_Call{Call: _e.mock.On("ContainerList", ctx, options)}
}

func (_c *DockerApi_ContainerList_Call) Run(run func(ctx context.Context, options container.ListOptions)) *DockerApi_ContainerList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(container.ListOptions))
	})
	return _c
}

func (_c *DockerApi_ContainerList_Call) Return(_a0 []types.Container, _a1 error) *DockerApi_ContainerList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DockerApi_ContainerList_Call) RunAndReturn(run func(context.Context, container.ListOptions) ([]types.Container, error)) *DockerApi_ContainerList_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerRemove provides a mock function with given fields: ctx, containerID, options
func (_m *DockerApi) ContainerRemove(ctx context.Context, containerID string, options container.RemoveOptions) error {
	ret := _m.Called(ctx, containerID, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerRemove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.RemoveOptions) error); ok {
		r0 = rf(ctx, containerID, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DockerApi_ContainerRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerRemove'
type DockerApi_ContainerRemove_Call struct {
	*mock.Call
}

// ContainerRemove is a helper method to define mock.On call
//   - ctx context.Context
//   - containerID string
//   - options container.RemoveOptions
func (_e *DockerApi_Expecter) ContainerRemove(ctx interface{}, containerID interface{}, options interface{}) *DockerApi_ContainerRemove_Call {
	return &DockerApi_ContainerRemove_Call{Call: _e.mock.On("ContainerRemove", ctx, containerID, options)}
}

func (_c *DockerApi_ContainerRemove_Call) Run(run func(ctx context.Context, containerID string, options container.RemoveOptions)) *DockerApi_ContainerRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.RemoveOptions))
	})
	return _c
}

func (_c *DockerApi_ContainerRemove_Call) Return(_a0 error) *DockerApi_ContainerRemove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DockerApi_ContainerRemove_Call) RunAndReturn(run func(context.Context, string, container.RemoveOptions) error) *DockerApi_ContainerRemove_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStart provides a mock function with given fields: ctx, containerID, options
func (_m *DockerApi) ContainerStart(ctx context.Context, containerID string, options container.StartOptions) error {
	ret := _m.Called(ctx, containerID, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.StartOptions) error); ok {
		r0 = rf(ctx, containerID, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DockerApi_ContainerStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStart'
type DockerApi_ContainerStart_Call struct {
	*mock.Call
}

// ContainerStart is a helper method to define mock.On call
//   - ctx context.Context
//   - containerID string
//   - options container.StartOptions
func (_e *DockerApi_Expecter) ContainerStart(ctx interface{}, containerID interface{}, options interface{}) *DockerApi_ContainerStart_Call {
	return &DockerApi_ContainerStart_Call{Call: _e.mock.On("ContainerStart", ctx, containerID, options)}
}

func (_c *DockerApi_ContainerStart_Call) Run(run func(ctx context.Context, containerID string, options container.StartOptions)) *DockerApi_ContainerStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.StartOptions))
	})
	return _c
}

func (_c *DockerApi_ContainerStart_Call) Return(_a0 error) *DockerApi_ContainerStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DockerApi_ContainerStart_Call) RunAndReturn(run func(context.Context, string, container.StartOptions) error) *DockerApi_ContainerStart_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStop provides a mock function with given fields: ctx, containerID, options
func (_m *DockerApi) ContainerStop(ctx context.Context, containerID string, options container.StopOptions) error {
	ret := _m.Called(ctx, containerID, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.StopOptions) error); ok {
		r0 = rf(ctx, containerID, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DockerApi_ContainerStop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStop'
type DockerApi_ContainerStop_Call struct {
	*mock.Call
}

// ContainerStop is a helper method to define mock.On call
//   - ctx context.Context
//   - containerID string
//   - options container.StopOptions
func (_e *DockerApi_Expecter) ContainerStop(ctx interface{}, containerID interface{}, options interface{}) *DockerApi_ContainerStop_Call {
	return &DockerApi_ContainerStop_Call{Call: _e.mock.On("ContainerStop", ctx, containerID, options)}
}

func (_c *DockerApi_ContainerStop_Call) Run(run func(ctx context.Context, containerID string, options container.StopOptions)) *DockerApi_ContainerStop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.StopOptions))
	})
	return _c
}

func (_c *DockerApi_ContainerStop_Call) Return(_a0 error) *DockerApi_ContainerStop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DockerApi_ContainerStop_Call) RunAndReturn(run func(context.Context, string, container.StopOptions) error) *DockerApi_ContainerStop_Call {
	_c.Call.Return(run)
	return _c
}

// Events provides a mock function with given fields: ctx, options
func (_m *DockerApi) Events(ctx context.Context, options events.ListOptions) (<-chan events.Message, <-chan error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for Events")
	}

	var r0 <-chan events.Message
	var r1 <-chan error
	if rf, ok := ret.Get(0).(func(context.Context, events.ListOptions) (<-chan events.Message, <-chan error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, events.ListOptions) <-chan events.Message); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan events.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, events.ListOptions) <-chan error); ok {
		r1 = rf(ctx, options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	return r0, r1
}

// DockerApi_Events_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Events'
type DockerApi_Events_Call struct {
	*mock.Call
}

// Events is a helper method to define mock.On call
//   - ctx context.Context
//   - options events.ListOptions
func (_e *DockerApi_Expecter) Events(ctx interface{}, options interface{}) *DockerApi_Events_Call {
	return &DockerApi_Events_Call{Call: _e.mock.On("Events", ctx, options)}
}

func (_c *DockerApi_Events_Call) Run(run func(ctx context.Context, options events.ListOptions)) *DockerApi_Events_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(events.ListOptions))
	})
	return _c
}

func (_c *DockerApi_Events_Call) Return(_a0 <-chan events.Message, _a1 <-chan error) *DockerApi_Events_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DockerApi_Events_Call) RunAndReturn(run func(context.Context, events.ListOptions) (<-chan events.Message, <-chan error)) *DockerApi_Events_Call {
	_c.Call.Return(run)
	return _c
}

// ImageBuild provides a mock function with given fields: ctx, buildContext, options
func (_m *DockerApi) ImageBuild(ctx context.Context, buildContext io.Reader, options types.ImageBuildOptions) (types.ImageBuildResponse, error) {
	ret := _m.Called(ctx, buildContext, options)

	if len(ret) == 0 {
		panic("no return value specified for ImageBuild")
	}

	var r0 types.ImageBuildResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, types.ImageBuildOptions) (types.ImageBuildResponse, error)); ok {
		return rf(ctx, buildContext, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, types.ImageBuildOptions) types.ImageBuildResponse); ok {
		r0 = rf(ctx, buildContext, options)
	} else {
		r0 = ret.Get(0).(types.ImageBuildResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, io.Reader, types.ImageBuildOptions) error); ok {
		r1 = rf(ctx, buildContext, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DockerApi_ImageBuild_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageBuild'
type DockerApi_ImageBuild_Call struct {
	*mock.Call
}

// ImageBuild is a helper method to define mock.On call
//   - ctx context.Context
//   - buildContext io.Reader
//   - options types.ImageBuildOptions
func (_e *DockerApi_Expecter) ImageBuild(ctx interface{}, buildContext interface{}, options interface{}) *DockerApi_ImageBuild_Call {
	return &DockerApi_ImageBuild_Call{Call: _e.mock.On("ImageBuild", ctx, buildContext, options)}
}

func (_c *DockerApi_ImageBuild_Call) Run(run func(ctx context.Context, buildContext io.Reader, options types.ImageBuildOptions)) *DockerApi_ImageBuild_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.Reader), args[2].(types.ImageBuildOptions))
	})
	return _c
}

func (_c *DockerApi_ImageBuild_Call) Return(_a0 types.ImageBuildResponse, _a1 error) *DockerApi_ImageBuild_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DockerApi_ImageBuild_Call) RunAndReturn(run func(context.Context, io.Reader, types.ImageBuildOptions) (types.ImageBuildResponse, error)) *DockerApi_ImageBuild_Call {
	_c.Call.Return(run)
	return _c
}

// ImageList provides a mock function with given fields: ctx, options
func (_m *DockerApi) ImageList(ctx context.Context, options image.ListOptions) ([]image.Summary, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ImageList")
	}

	var r0 []image.Summary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, image.ListOptions) ([]image.Summary, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, image.ListOptions) []image.Summary); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]image.Summary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, image.ListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DockerApi_ImageList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageList'
type DockerApi_ImageList_Call struct {
	*mock.Call
}

// ImageList is a helper method to define mock.On call
//   - ctx context.Context
//   - options image.ListOptions
func (_e *DockerApi_Expecter) ImageList(ctx interface{}, options interface{}) *DockerApi_ImageList_Call {
	return &DockerApi_ImageList_Call{Call: _e.mock.On("ImageList", ctx, options)}
}

func (_c *DockerApi_ImageList_Call) Run(run func(ctx context.Context, options image.ListOptions)) *DockerApi_ImageList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(image.ListOptions))
	})
	return _c
}

func (_c *DockerApi_ImageList_Call) Return(_a0 []image.Summary, _a1 error) *DockerApi_ImageList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DockerApi_ImageList_Call) RunAndReturn(run func(context.Context, image.ListOptions) ([]image.Summary, error)) *DockerApi_ImageList_Call {
	_c.Call.Return(run)
	return _c
}

// ImagePull provides a mock function with given fields: ctx, refStr, options
func (_m *DockerApi) ImagePull(ctx context.Context, refStr string, options image.PullOptions) (io.ReadCloser, error) {
	ret := _m.Called(ctx, refStr, options)

	if len(ret) == 0 {
		panic("no return value specified for ImagePull")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, image.PullOptions) (io.ReadCloser, error)); ok {
		return rf(ctx, refStr, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, image.PullOptions) io.ReadCloser); ok {
		r0 = rf(ctx, refStr, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, image.PullOptions) error); ok {
		r1 = rf(ctx, refStr, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DockerApi_ImagePull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImagePull'
type DockerApi_ImagePull_Call struct {
	*mock.Call
}

// ImagePull is a helper method to define mock.On call
//   - ctx context.Context
//   - refStr string
//   - options image.PullOptions
func (_e *DockerApi_Expecter) ImagePull(ctx interface{}, refStr interface{}, options interface{}) *DockerApi_ImagePull_Call {
	return &DockerApi_ImagePull_Call{Call: _e.mock.On("ImagePull", ctx, refStr, options)}
}

func (_c *DockerApi_ImagePull_Call) Run(run func(ctx context.Context, refStr string, options image.PullOptions)) *DockerApi_ImagePull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(image.PullOptions))
	})
	return _c
}

func (_c *DockerApi_ImagePull_Call) Return(_a0 io.ReadCloser, _a1 error) *DockerApi_ImagePull_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DockerApi_ImagePull_Call) RunAndReturn(run func(context.Context, string, image.PullOptions) (io.ReadCloser, error)) *DockerApi_ImagePull_Call {
	_c.Call.Return(run)
	return _c
}

// NewDockerApi creates a new instance of DockerApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDockerApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *DockerApi {
	mock := &DockerApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
